# coding: utf-8

"""
AuditLogRecord.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class AuditLogRecord(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuditLogRecord - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'method': 'str',  # (required parameter)
            'accessed_url': 'str',  # (required parameter)
            'client_ip': 'str',  # (required parameter)
            'user_id': 'str',  # (required parameter)
            'http_status': 'int',  # (required parameter)
            'http_reason_phrase': 'str',  # (required parameter)
            'is_federated': 'bool',  # (required parameter)
            'logging_agent': 'str',  # (required parameter)
            'cli_command_executed': 'str',  
            'cli_return_status': 'str',  
            'symbol_procedure': 'str',  
            'ssh_event_type': 'str',  
            'ssh_session_pid': 'int',  
            'ssh_session_duration': 'int',  
            'timestamp': 'int',  # (required parameter)
            'record_ordinal': 'int'
        }

        self.attribute_map = {
            'method': 'method',  # (required parameter)
            'accessed_url': 'accessedUrl',  # (required parameter)
            'client_ip': 'clientIp',  # (required parameter)
            'user_id': 'userId',  # (required parameter)
            'http_status': 'httpStatus',  # (required parameter)
            'http_reason_phrase': 'httpReasonPhrase',  # (required parameter)
            'is_federated': 'isFederated',  # (required parameter)
            'logging_agent': 'loggingAgent',  # (required parameter)
            'cli_command_executed': 'cliCommandExecuted',  
            'cli_return_status': 'cliReturnStatus',  
            'symbol_procedure': 'symbolProcedure',  
            'ssh_event_type': 'sshEventType',  
            'ssh_session_pid': 'sshSessionPid',  
            'ssh_session_duration': 'sshSessionDuration',  
            'timestamp': 'timestamp',  # (required parameter)
            'record_ordinal': 'recordOrdinal'
        }

        self._method = None
        self._accessed_url = None
        self._client_ip = None
        self._user_id = None
        self._http_status = None
        self._http_reason_phrase = None
        self._is_federated = None
        self._logging_agent = None
        self._cli_command_executed = None
        self._cli_return_status = None
        self._symbol_procedure = None
        self._ssh_event_type = None
        self._ssh_session_pid = None
        self._ssh_session_duration = None
        self._timestamp = None
        self._record_ordinal = None

    @property
    def method(self):
        """
        Gets the method of this AuditLogRecord.
        HTTP method, for example GET and POST.

        :return: The method of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this AuditLogRecord.
        HTTP method, for example GET and POST.

        :param method: The method of this AuditLogRecord.
        :type: str
        """
        self._method = method

    @property
    def accessed_url(self):
        """
        Gets the accessed_url of this AuditLogRecord.
        Accessed URL.

        :return: The accessed_url of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._accessed_url

    @accessed_url.setter
    def accessed_url(self, accessed_url):
        """
        Sets the accessed_url of this AuditLogRecord.
        Accessed URL.

        :param accessed_url: The accessed_url of this AuditLogRecord.
        :type: str
        """
        self._accessed_url = accessed_url

    @property
    def client_ip(self):
        """
        Gets the client_ip of this AuditLogRecord.
        IP address of client.

        :return: The client_ip of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """
        Sets the client_ip of this AuditLogRecord.
        IP address of client.

        :param client_ip: The client_ip of this AuditLogRecord.
        :type: str
        """
        self._client_ip = client_ip

    @property
    def user_id(self):
        """
        Gets the user_id of this AuditLogRecord.
        Username of the user accessing the URL.

        :return: The user_id of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AuditLogRecord.
        Username of the user accessing the URL.

        :param user_id: The user_id of this AuditLogRecord.
        :type: str
        """
        self._user_id = user_id

    @property
    def http_status(self):
        """
        Gets the http_status of this AuditLogRecord.
        HTTP status code of the operation.

        :return: The http_status of this AuditLogRecord.
        :rtype: int
        :required/optional: required
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """
        Sets the http_status of this AuditLogRecord.
        HTTP status code of the operation.

        :param http_status: The http_status of this AuditLogRecord.
        :type: int
        """
        self._http_status = http_status

    @property
    def http_reason_phrase(self):
        """
        Gets the http_reason_phrase of this AuditLogRecord.
        HTTP reason phrase.

        :return: The http_reason_phrase of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._http_reason_phrase

    @http_reason_phrase.setter
    def http_reason_phrase(self, http_reason_phrase):
        """
        Sets the http_reason_phrase of this AuditLogRecord.
        HTTP reason phrase.

        :param http_reason_phrase: The http_reason_phrase of this AuditLogRecord.
        :type: str
        """
        self._http_reason_phrase = http_reason_phrase

    @property
    def is_federated(self):
        """
        Gets the is_federated of this AuditLogRecord.
        Indicates if the user was authenticated by WSP in a federated security environment.

        :return: The is_federated of this AuditLogRecord.
        :rtype: bool
        :required/optional: required
        """
        return self._is_federated

    @is_federated.setter
    def is_federated(self, is_federated):
        """
        Sets the is_federated of this AuditLogRecord.
        Indicates if the user was authenticated by WSP in a federated security environment.

        :param is_federated: The is_federated of this AuditLogRecord.
        :type: bool
        """
        self._is_federated = is_federated

    @property
    def logging_agent(self):
        """
        Gets the logging_agent of this AuditLogRecord.
        Logging agent.

        :return: The logging_agent of this AuditLogRecord.
        :rtype: str
        :required/optional: required
        """
        return self._logging_agent

    @logging_agent.setter
    def logging_agent(self, logging_agent):
        """
        Sets the logging_agent of this AuditLogRecord.
        Logging agent.

        :param logging_agent: The logging_agent of this AuditLogRecord.
        :type: str
        """
        self._logging_agent = logging_agent

    @property
    def cli_command_executed(self):
        """
        Gets the cli_command_executed of this AuditLogRecord.
        CLI command executed.

        :return: The cli_command_executed of this AuditLogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._cli_command_executed

    @cli_command_executed.setter
    def cli_command_executed(self, cli_command_executed):
        """
        Sets the cli_command_executed of this AuditLogRecord.
        CLI command executed.

        :param cli_command_executed: The cli_command_executed of this AuditLogRecord.
        :type: str
        """
        self._cli_command_executed = cli_command_executed

    @property
    def cli_return_status(self):
        """
        Gets the cli_return_status of this AuditLogRecord.
        CLI status code or request for input files.

        :return: The cli_return_status of this AuditLogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._cli_return_status

    @cli_return_status.setter
    def cli_return_status(self, cli_return_status):
        """
        Sets the cli_return_status of this AuditLogRecord.
        CLI status code or request for input files.

        :param cli_return_status: The cli_return_status of this AuditLogRecord.
        :type: str
        """
        self._cli_return_status = cli_return_status

    @property
    def symbol_procedure(self):
        """
        Gets the symbol_procedure of this AuditLogRecord.
        Symbol procedure.

        :return: The symbol_procedure of this AuditLogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._symbol_procedure

    @symbol_procedure.setter
    def symbol_procedure(self, symbol_procedure):
        """
        Sets the symbol_procedure of this AuditLogRecord.
        Symbol procedure.

        :param symbol_procedure: The symbol_procedure of this AuditLogRecord.
        :type: str
        """
        self._symbol_procedure = symbol_procedure

    @property
    def ssh_event_type(self):
        """
        Gets the ssh_event_type of this AuditLogRecord.
        SSH login event type.

        :return: The ssh_event_type of this AuditLogRecord.
        :rtype: str
        :required/optional: optional
        """
        return self._ssh_event_type

    @ssh_event_type.setter
    def ssh_event_type(self, ssh_event_type):
        """
        Sets the ssh_event_type of this AuditLogRecord.
        SSH login event type.

        :param ssh_event_type: The ssh_event_type of this AuditLogRecord.
        :type: str
        """
        allowed_values = ["login", "logout", "login_fail", None]
        if ssh_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ssh_event_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._ssh_event_type = ssh_event_type

    @property
    def ssh_session_pid(self):
        """
        Gets the ssh_session_pid of this AuditLogRecord.
        SSH session process ID.

        :return: The ssh_session_pid of this AuditLogRecord.
        :rtype: int
        :required/optional: optional
        """
        return self._ssh_session_pid

    @ssh_session_pid.setter
    def ssh_session_pid(self, ssh_session_pid):
        """
        Sets the ssh_session_pid of this AuditLogRecord.
        SSH session process ID.

        :param ssh_session_pid: The ssh_session_pid of this AuditLogRecord.
        :type: int
        """
        self._ssh_session_pid = ssh_session_pid

    @property
    def ssh_session_duration(self):
        """
        Gets the ssh_session_duration of this AuditLogRecord.
        SSH session duration (in seconds).

        :return: The ssh_session_duration of this AuditLogRecord.
        :rtype: int
        :required/optional: optional
        """
        return self._ssh_session_duration

    @ssh_session_duration.setter
    def ssh_session_duration(self, ssh_session_duration):
        """
        Sets the ssh_session_duration of this AuditLogRecord.
        SSH session duration (in seconds).

        :param ssh_session_duration: The ssh_session_duration of this AuditLogRecord.
        :type: int
        """
        self._ssh_session_duration = ssh_session_duration

    @property
    def timestamp(self):
        """
        Gets the timestamp of this AuditLogRecord.
        Date and time of accessed URL in seconds since midnight GMT on January 1, 1970.

        :return: The timestamp of this AuditLogRecord.
        :rtype: int
        :required/optional: required
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this AuditLogRecord.
        Date and time of accessed URL in seconds since midnight GMT on January 1, 1970.

        :param timestamp: The timestamp of this AuditLogRecord.
        :type: int
        """
        self._timestamp = timestamp

    @property
    def record_ordinal(self):
        """
        Gets the record_ordinal of this AuditLogRecord.
        Record ordinal.

        :return: The record_ordinal of this AuditLogRecord.
        :rtype: int
        :required/optional: required
        """
        return self._record_ordinal

    @record_ordinal.setter
    def record_ordinal(self, record_ordinal):
        """
        Sets the record_ordinal of this AuditLogRecord.
        Record ordinal.

        :param record_ordinal: The record_ordinal of this AuditLogRecord.
        :type: int
        """
        self._record_ordinal = record_ordinal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

