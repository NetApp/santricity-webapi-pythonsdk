# coding: utf-8

"""
NVMeoFInterfaceStatistics.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class NVMeoFInterfaceStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NVMeoFInterfaceStatistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'interface_ref': 'str',  # (required parameter)
            'total_controller_count': 'int',  # (required parameter)
            'keep_alive_timeouts': 'int',  # (required parameter)
            'max_io_queues_connect_failures': 'int',  # (required parameter)
            'max_controller_connect_failures': 'int',  # (required parameter)
            'nvme_controller_resets': 'int',  # (required parameter)
            'nvme_controller_shutdowns': 'int',  # (required parameter)
            'admin_queue_statistics': 'NVMeoFQueueStatistics',  # (required parameter)
            'io_queue_statistics': 'NVMeoFQueueStatistics'
        }

        self.attribute_map = {
            'interface_ref': 'interfaceRef',  # (required parameter)
            'total_controller_count': 'totalControllerCount',  # (required parameter)
            'keep_alive_timeouts': 'keepAliveTimeouts',  # (required parameter)
            'max_io_queues_connect_failures': 'maxIoQueuesConnectFailures',  # (required parameter)
            'max_controller_connect_failures': 'maxControllerConnectFailures',  # (required parameter)
            'nvme_controller_resets': 'nvmeControllerResets',  # (required parameter)
            'nvme_controller_shutdowns': 'nvmeControllerShutdowns',  # (required parameter)
            'admin_queue_statistics': 'adminQueueStatistics',  # (required parameter)
            'io_queue_statistics': 'ioQueueStatistics'
        }

        self._interface_ref = None
        self._total_controller_count = None
        self._keep_alive_timeouts = None
        self._max_io_queues_connect_failures = None
        self._max_controller_connect_failures = None
        self._nvme_controller_resets = None
        self._nvme_controller_shutdowns = None
        self._admin_queue_statistics = None
        self._io_queue_statistics = None

    @property
    def interface_ref(self):
        """
        Gets the interface_ref of this NVMeoFInterfaceStatistics.
        The reference to the interface object.

        :return: The interface_ref of this NVMeoFInterfaceStatistics.
        :rtype: str
        :required/optional: required
        """
        return self._interface_ref

    @interface_ref.setter
    def interface_ref(self, interface_ref):
        """
        Sets the interface_ref of this NVMeoFInterfaceStatistics.
        The reference to the interface object.

        :param interface_ref: The interface_ref of this NVMeoFInterfaceStatistics.
        :type: str
        """
        self._interface_ref = interface_ref

    @property
    def total_controller_count(self):
        """
        Gets the total_controller_count of this NVMeoFInterfaceStatistics.
        The number of NVMe controllers (i.e., I_T_Nexuses in SCSI terminology) over this interface.

        :return: The total_controller_count of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._total_controller_count

    @total_controller_count.setter
    def total_controller_count(self, total_controller_count):
        """
        Sets the total_controller_count of this NVMeoFInterfaceStatistics.
        The number of NVMe controllers (i.e., I_T_Nexuses in SCSI terminology) over this interface.

        :param total_controller_count: The total_controller_count of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._total_controller_count = total_controller_count

    @property
    def keep_alive_timeouts(self):
        """
        Gets the keep_alive_timeouts of this NVMeoFInterfaceStatistics.
        The number of Keep Alive Timeouts that have occurred on this NVMe over Fabrics interface.

        :return: The keep_alive_timeouts of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._keep_alive_timeouts

    @keep_alive_timeouts.setter
    def keep_alive_timeouts(self, keep_alive_timeouts):
        """
        Sets the keep_alive_timeouts of this NVMeoFInterfaceStatistics.
        The number of Keep Alive Timeouts that have occurred on this NVMe over Fabrics interface.

        :param keep_alive_timeouts: The keep_alive_timeouts of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._keep_alive_timeouts = keep_alive_timeouts

    @property
    def max_io_queues_connect_failures(self):
        """
        Gets the max_io_queues_connect_failures of this NVMeoFInterfaceStatistics.
        The maximum number of I/O Queue Connect Failures that have occurred on this NVMe over Fabrics interface.

        :return: The max_io_queues_connect_failures of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._max_io_queues_connect_failures

    @max_io_queues_connect_failures.setter
    def max_io_queues_connect_failures(self, max_io_queues_connect_failures):
        """
        Sets the max_io_queues_connect_failures of this NVMeoFInterfaceStatistics.
        The maximum number of I/O Queue Connect Failures that have occurred on this NVMe over Fabrics interface.

        :param max_io_queues_connect_failures: The max_io_queues_connect_failures of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._max_io_queues_connect_failures = max_io_queues_connect_failures

    @property
    def max_controller_connect_failures(self):
        """
        Gets the max_controller_connect_failures of this NVMeoFInterfaceStatistics.
        The maximum number of NVMe Controller Connect Failures that have occurred on this NVMe over Fabrics interface.

        :return: The max_controller_connect_failures of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._max_controller_connect_failures

    @max_controller_connect_failures.setter
    def max_controller_connect_failures(self, max_controller_connect_failures):
        """
        Sets the max_controller_connect_failures of this NVMeoFInterfaceStatistics.
        The maximum number of NVMe Controller Connect Failures that have occurred on this NVMe over Fabrics interface.

        :param max_controller_connect_failures: The max_controller_connect_failures of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._max_controller_connect_failures = max_controller_connect_failures

    @property
    def nvme_controller_resets(self):
        """
        Gets the nvme_controller_resets of this NVMeoFInterfaceStatistics.
        The number of NVM Controller Resets that have occurred on this NVMe over Fabrics interface.

        :return: The nvme_controller_resets of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._nvme_controller_resets

    @nvme_controller_resets.setter
    def nvme_controller_resets(self, nvme_controller_resets):
        """
        Sets the nvme_controller_resets of this NVMeoFInterfaceStatistics.
        The number of NVM Controller Resets that have occurred on this NVMe over Fabrics interface.

        :param nvme_controller_resets: The nvme_controller_resets of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._nvme_controller_resets = nvme_controller_resets

    @property
    def nvme_controller_shutdowns(self):
        """
        Gets the nvme_controller_shutdowns of this NVMeoFInterfaceStatistics.
        The number of NVM Controller Shutdowns that have occurred on this NVMe over Fabrics interface.

        :return: The nvme_controller_shutdowns of this NVMeoFInterfaceStatistics.
        :rtype: int
        :required/optional: required
        """
        return self._nvme_controller_shutdowns

    @nvme_controller_shutdowns.setter
    def nvme_controller_shutdowns(self, nvme_controller_shutdowns):
        """
        Sets the nvme_controller_shutdowns of this NVMeoFInterfaceStatistics.
        The number of NVM Controller Shutdowns that have occurred on this NVMe over Fabrics interface.

        :param nvme_controller_shutdowns: The nvme_controller_shutdowns of this NVMeoFInterfaceStatistics.
        :type: int
        """
        self._nvme_controller_shutdowns = nvme_controller_shutdowns

    @property
    def admin_queue_statistics(self):
        """
        Gets the admin_queue_statistics of this NVMeoFInterfaceStatistics.
        This structure describes the NVMe over Fabrics queue statistics for the Admin Queue.

        :return: The admin_queue_statistics of this NVMeoFInterfaceStatistics.
        :rtype: NVMeoFQueueStatistics
        :required/optional: required
        """
        return self._admin_queue_statistics

    @admin_queue_statistics.setter
    def admin_queue_statistics(self, admin_queue_statistics):
        """
        Sets the admin_queue_statistics of this NVMeoFInterfaceStatistics.
        This structure describes the NVMe over Fabrics queue statistics for the Admin Queue.

        :param admin_queue_statistics: The admin_queue_statistics of this NVMeoFInterfaceStatistics.
        :type: NVMeoFQueueStatistics
        """
        self._admin_queue_statistics = admin_queue_statistics

    @property
    def io_queue_statistics(self):
        """
        Gets the io_queue_statistics of this NVMeoFInterfaceStatistics.
        This structure describes the NVMe over Fabrics queue statistics for the I/O Queues.

        :return: The io_queue_statistics of this NVMeoFInterfaceStatistics.
        :rtype: NVMeoFQueueStatistics
        :required/optional: required
        """
        return self._io_queue_statistics

    @io_queue_statistics.setter
    def io_queue_statistics(self, io_queue_statistics):
        """
        Sets the io_queue_statistics of this NVMeoFInterfaceStatistics.
        This structure describes the NVMe over Fabrics queue statistics for the I/O Queues.

        :param io_queue_statistics: The io_queue_statistics of this NVMeoFInterfaceStatistics.
        :type: NVMeoFQueueStatistics
        """
        self._io_queue_statistics = io_queue_statistics

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

