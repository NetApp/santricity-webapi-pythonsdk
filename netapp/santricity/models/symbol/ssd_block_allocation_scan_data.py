# coding: utf-8

"""
SSDBlockAllocationScanData.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class SSDBlockAllocationScanData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SSDBlockAllocationScanData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drive_ref': 'str',  # (required parameter)
            'all_blocks': 'bool',  # (required parameter)
            'allocated_mapped_blocks': 'int',  # (required parameter)
            'allocated_unmapped_blocks': 'int',  # (required parameter)
            'free_unmapped_blocks': 'int',  # (required parameter)
            'free_mapped_extents': 'list[BlockExtent]',  # (required parameter)
            'free_mapped_blocks': 'int'
        }

        self.attribute_map = {
            'drive_ref': 'driveRef',  # (required parameter)
            'all_blocks': 'allBlocks',  # (required parameter)
            'allocated_mapped_blocks': 'allocatedMappedBlocks',  # (required parameter)
            'allocated_unmapped_blocks': 'allocatedUnmappedBlocks',  # (required parameter)
            'free_unmapped_blocks': 'freeUnmappedBlocks',  # (required parameter)
            'free_mapped_extents': 'freeMappedExtents',  # (required parameter)
            'free_mapped_blocks': 'freeMappedBlocks'
        }

        self._drive_ref = None
        self._all_blocks = None
        self._allocated_mapped_blocks = None
        self._allocated_unmapped_blocks = None
        self._free_unmapped_blocks = None
        self._free_mapped_extents = None
        self._free_mapped_blocks = None

    @property
    def drive_ref(self):
        """
        Gets the drive_ref of this SSDBlockAllocationScanData.
        The drive reference the statistics are about.

        :return: The drive_ref of this SSDBlockAllocationScanData.
        :rtype: str
        :required/optional: required
        """
        return self._drive_ref

    @drive_ref.setter
    def drive_ref(self, drive_ref):
        """
        Sets the drive_ref of this SSDBlockAllocationScanData.
        The drive reference the statistics are about.

        :param drive_ref: The drive_ref of this SSDBlockAllocationScanData.
        :type: str
        """
        self._drive_ref = drive_ref

    @property
    def all_blocks(self):
        """
        Gets the all_blocks of this SSDBlockAllocationScanData.
        Boolean indication that determined what blocks to scan, was given at time the scan was request. If false, only free (not in use) blocks are scanned, if true, both free and allocated blocks are scanned. The allocatedMappedBlocks is estimated if allBlocks is false.

        :return: The all_blocks of this SSDBlockAllocationScanData.
        :rtype: bool
        :required/optional: required
        """
        return self._all_blocks

    @all_blocks.setter
    def all_blocks(self, all_blocks):
        """
        Sets the all_blocks of this SSDBlockAllocationScanData.
        Boolean indication that determined what blocks to scan, was given at time the scan was request. If false, only free (not in use) blocks are scanned, if true, both free and allocated blocks are scanned. The allocatedMappedBlocks is estimated if allBlocks is false.

        :param all_blocks: The all_blocks of this SSDBlockAllocationScanData.
        :type: bool
        """
        self._all_blocks = all_blocks

    @property
    def allocated_mapped_blocks(self):
        """
        Gets the allocated_mapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are allocated (in use) and mapped by the device.

        :return: The allocated_mapped_blocks of this SSDBlockAllocationScanData.
        :rtype: int
        :required/optional: required
        """
        return self._allocated_mapped_blocks

    @allocated_mapped_blocks.setter
    def allocated_mapped_blocks(self, allocated_mapped_blocks):
        """
        Sets the allocated_mapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are allocated (in use) and mapped by the device.

        :param allocated_mapped_blocks: The allocated_mapped_blocks of this SSDBlockAllocationScanData.
        :type: int
        """
        self._allocated_mapped_blocks = allocated_mapped_blocks

    @property
    def allocated_unmapped_blocks(self):
        """
        Gets the allocated_unmapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are allocated (in use) and ummapped by the device.

        :return: The allocated_unmapped_blocks of this SSDBlockAllocationScanData.
        :rtype: int
        :required/optional: required
        """
        return self._allocated_unmapped_blocks

    @allocated_unmapped_blocks.setter
    def allocated_unmapped_blocks(self, allocated_unmapped_blocks):
        """
        Sets the allocated_unmapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are allocated (in use) and ummapped by the device.

        :param allocated_unmapped_blocks: The allocated_unmapped_blocks of this SSDBlockAllocationScanData.
        :type: int
        """
        self._allocated_unmapped_blocks = allocated_unmapped_blocks

    @property
    def free_unmapped_blocks(self):
        """
        Gets the free_unmapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are free (not in use) and ummapped by the device.

        :return: The free_unmapped_blocks of this SSDBlockAllocationScanData.
        :rtype: int
        :required/optional: required
        """
        return self._free_unmapped_blocks

    @free_unmapped_blocks.setter
    def free_unmapped_blocks(self, free_unmapped_blocks):
        """
        Sets the free_unmapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are free (not in use) and ummapped by the device.

        :param free_unmapped_blocks: The free_unmapped_blocks of this SSDBlockAllocationScanData.
        :type: int
        """
        self._free_unmapped_blocks = free_unmapped_blocks

    @property
    def free_mapped_extents(self):
        """
        Gets the free_mapped_extents of this SSDBlockAllocationScanData.
        Block extents found that are free (not in use) and mapped by the device. List may be truncated for if too long.

        :return: The free_mapped_extents of this SSDBlockAllocationScanData.
        :rtype: list[BlockExtent]
        :required/optional: required
        """
        return self._free_mapped_extents

    @free_mapped_extents.setter
    def free_mapped_extents(self, free_mapped_extents):
        """
        Sets the free_mapped_extents of this SSDBlockAllocationScanData.
        Block extents found that are free (not in use) and mapped by the device. List may be truncated for if too long.

        :param free_mapped_extents: The free_mapped_extents of this SSDBlockAllocationScanData.
        :type: list[BlockExtent]
        """
        self._free_mapped_extents = free_mapped_extents

    @property
    def free_mapped_blocks(self):
        """
        Gets the free_mapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are free (not in use) and mapped by the device.

        :return: The free_mapped_blocks of this SSDBlockAllocationScanData.
        :rtype: int
        :required/optional: required
        """
        return self._free_mapped_blocks

    @free_mapped_blocks.setter
    def free_mapped_blocks(self, free_mapped_blocks):
        """
        Sets the free_mapped_blocks of this SSDBlockAllocationScanData.
        Count of blocks found that are free (not in use) and mapped by the device.

        :param free_mapped_blocks: The free_mapped_blocks of this SSDBlockAllocationScanData.
        :type: int
        """
        self._free_mapped_blocks = free_mapped_blocks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

