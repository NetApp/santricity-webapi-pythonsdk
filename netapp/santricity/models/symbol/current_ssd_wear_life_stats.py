# coding: utf-8

"""
CurrentSSDWearLifeStats.py

 The Clear BSD License

 Copyright (c) â€“ 2016, NetApp, Inc. All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 * Neither the name of NetApp, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

from pprint import pformat
from six import iteritems


class CurrentSSDWearLifeStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CurrentSSDWearLifeStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drive_ref': 'str',  # (required parameter)
            'available_block_mappings': 'int',  # (required parameter)
            'used_block_mappings': 'int',  # (required parameter)
            'percent_available_provisioning': 'int',  # (required parameter)
            'host_write_blocks': 'int',  # (required parameter)
            'total_nand_write_blocks': 'int',  # (required parameter)
            'power_on_hours': 'int',  # (required parameter)
            'percent_endurance_remaining': 'int',  # (required parameter)
            'percent_endurance_used': 'int'
        }

        self.attribute_map = {
            'drive_ref': 'driveRef',  # (required parameter)
            'available_block_mappings': 'availableBlockMappings',  # (required parameter)
            'used_block_mappings': 'usedBlockMappings',  # (required parameter)
            'percent_available_provisioning': 'percentAvailableProvisioning',  # (required parameter)
            'host_write_blocks': 'hostWriteBlocks',  # (required parameter)
            'total_nand_write_blocks': 'totalNANDWriteBlocks',  # (required parameter)
            'power_on_hours': 'powerOnHours',  # (required parameter)
            'percent_endurance_remaining': 'percentEnduranceRemaining',  # (required parameter)
            'percent_endurance_used': 'percentEnduranceUsed'
        }

        self._drive_ref = None
        self._available_block_mappings = None
        self._used_block_mappings = None
        self._percent_available_provisioning = None
        self._host_write_blocks = None
        self._total_nand_write_blocks = None
        self._power_on_hours = None
        self._percent_endurance_remaining = None
        self._percent_endurance_used = None

    @property
    def drive_ref(self):
        """
        Gets the drive_ref of this CurrentSSDWearLifeStats.
        Drive reference the statuses are for.

        :return: The drive_ref of this CurrentSSDWearLifeStats.
        :rtype: str
        :required/optional: required
        """
        return self._drive_ref

    @drive_ref.setter
    def drive_ref(self, drive_ref):
        """
        Sets the drive_ref of this CurrentSSDWearLifeStats.
        Drive reference the statuses are for.

        :param drive_ref: The drive_ref of this CurrentSSDWearLifeStats.
        :type: str
        """
        self._drive_ref = drive_ref

    @property
    def available_block_mappings(self):
        """
        Gets the available_block_mappings of this CurrentSSDWearLifeStats.
        The available block mappings for the device.

        :return: The available_block_mappings of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._available_block_mappings

    @available_block_mappings.setter
    def available_block_mappings(self, available_block_mappings):
        """
        Sets the available_block_mappings of this CurrentSSDWearLifeStats.
        The available block mappings for the device.

        :param available_block_mappings: The available_block_mappings of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._available_block_mappings = available_block_mappings

    @property
    def used_block_mappings(self):
        """
        Gets the used_block_mappings of this CurrentSSDWearLifeStats.
        The used block mappings for the device.

        :return: The used_block_mappings of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._used_block_mappings

    @used_block_mappings.setter
    def used_block_mappings(self, used_block_mappings):
        """
        Sets the used_block_mappings of this CurrentSSDWearLifeStats.
        The used block mappings for the device.

        :param used_block_mappings: The used_block_mappings of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._used_block_mappings = used_block_mappings

    @property
    def percent_available_provisioning(self):
        """
        Gets the percent_available_provisioning of this CurrentSSDWearLifeStats.
        Percent of provisioning that is still available.

        :return: The percent_available_provisioning of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._percent_available_provisioning

    @percent_available_provisioning.setter
    def percent_available_provisioning(self, percent_available_provisioning):
        """
        Sets the percent_available_provisioning of this CurrentSSDWearLifeStats.
        Percent of provisioning that is still available.

        :param percent_available_provisioning: The percent_available_provisioning of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._percent_available_provisioning = percent_available_provisioning

    @property
    def host_write_blocks(self):
        """
        Gets the host_write_blocks of this CurrentSSDWearLifeStats.
        Total count of all Host Write Blocks processed.

        :return: The host_write_blocks of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._host_write_blocks

    @host_write_blocks.setter
    def host_write_blocks(self, host_write_blocks):
        """
        Sets the host_write_blocks of this CurrentSSDWearLifeStats.
        Total count of all Host Write Blocks processed.

        :param host_write_blocks: The host_write_blocks of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._host_write_blocks = host_write_blocks

    @property
    def total_nand_write_blocks(self):
        """
        Gets the total_nand_write_blocks of this CurrentSSDWearLifeStats.
        The total NAND Write Blocks received by the device.

        :return: The total_nand_write_blocks of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._total_nand_write_blocks

    @total_nand_write_blocks.setter
    def total_nand_write_blocks(self, total_nand_write_blocks):
        """
        Sets the total_nand_write_blocks of this CurrentSSDWearLifeStats.
        The total NAND Write Blocks received by the device.

        :param total_nand_write_blocks: The total_nand_write_blocks of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._total_nand_write_blocks = total_nand_write_blocks

    @property
    def power_on_hours(self):
        """
        Gets the power_on_hours of this CurrentSSDWearLifeStats.
        Total hours the device has been powered on.

        :return: The power_on_hours of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._power_on_hours

    @power_on_hours.setter
    def power_on_hours(self, power_on_hours):
        """
        Sets the power_on_hours of this CurrentSSDWearLifeStats.
        Total hours the device has been powered on.

        :param power_on_hours: The power_on_hours of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._power_on_hours = power_on_hours

    @property
    def percent_endurance_remaining(self):
        """
        Gets the percent_endurance_remaining of this CurrentSSDWearLifeStats.
        Percent of endurance remaining.

        :return: The percent_endurance_remaining of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._percent_endurance_remaining

    @percent_endurance_remaining.setter
    def percent_endurance_remaining(self, percent_endurance_remaining):
        """
        Sets the percent_endurance_remaining of this CurrentSSDWearLifeStats.
        Percent of endurance remaining.

        :param percent_endurance_remaining: The percent_endurance_remaining of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._percent_endurance_remaining = percent_endurance_remaining

    @property
    def percent_endurance_used(self):
        """
        Gets the percent_endurance_used of this CurrentSSDWearLifeStats.
        Percent indicating an estimate of the life that has been used.

        :return: The percent_endurance_used of this CurrentSSDWearLifeStats.
        :rtype: int
        :required/optional: required
        """
        return self._percent_endurance_used

    @percent_endurance_used.setter
    def percent_endurance_used(self, percent_endurance_used):
        """
        Sets the percent_endurance_used of this CurrentSSDWearLifeStats.
        Percent indicating an estimate of the life that has been used.

        :param percent_endurance_used: The percent_endurance_used of this CurrentSSDWearLifeStats.
        :type: int
        """
        self._percent_endurance_used = percent_endurance_used

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        if self is None:
           return None
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if self is None or other is None:
            return None
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

